{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,SACTN,EAAWO,OAAOC,OAAO,IACxBV,GAAc,SAAAW,GAAI,OAAKT,GAAL,mBAAmBS,OACrCR,EAAc,MAIlB,SACI,uBACIS,KAAK,OACLC,MAAOX,EACPY,SAjBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAWH,GAD9C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGCA,EAAKC,OAHN,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATtB,kBAYZM,GAZY,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,oCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAKA,EAAL,WCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECHwB,SAACA,GACzB,MAA0BhB,mBAAS,CAC/BuB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAItB,CAACpB,IAIIqB,EDjBuBK,CAAa1B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAEnB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,2BACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEXxBgB,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,6BAEQ6C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCdjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.23cd6f70.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');    \n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log('hecho');\n        if(inputValue.trim().length>2){\n            setCategories(cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories:PropTypes.func.isRequired\n}","\n\nexport const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=OYM8Xmam1Goi4RzJry2i7UHh6g2N1PFo`;\n    const resp= await fetch(url);\n    const {data}= await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react';\n\nexport const GifGridItem = ({id,title,url}) => {\n    //console.log(id,title,url);\n    return (\n        <div className=\"animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }/>\n            <p> {title} </p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images,loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n            { loading && <p className=\"animate__animated animate__flash\">'Cargando...'</p> }\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport {getGifs} from '../helpers/GetGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });     \n    \n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                    \n                setState({\n                    data:imgs,\n                    loading:false\n                });\n\n            })\n    },[category]);\n\n    \n\n    return state;//{data:[],loading:true};\n}\n\n","import React,{ useState } from 'react';\n\nimport {AddCategory} from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    \n    const [categories, setCategories] = useState(['One Punch']);\n \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={setCategories}/>\n\n            <hr/>\n         \n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}